<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust-analyzer</title>
    <description>rust-analyzer: building a better Rust IDE</description>
    <link>https://rust-analyzer.github.io//</link>
    <atom:link href="https://rust-analyzer.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 19 Feb 2024 10:09:07 +0000</pubDate>
    <lastBuildDate>Mon, 19 Feb 2024 10:09:07 +0000</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Changelog #221</title>
        <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2024/02/19/changelog-221.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2024/02/19/changelog-221.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/68c506fd6299c60c96a6202ca08f9d868a0838a3&quot;&gt;&lt;code&gt;68c506f&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2024-02-19&quot;&gt;&lt;code&gt;2024-02-19&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;v0.3.1850&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16092&quot;&gt;&lt;code&gt;#16092&lt;/code&gt;&lt;/a&gt; (first contribution) introduce term search to &lt;code&gt;rust-analyzer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16117&quot;&gt;&lt;code&gt;#16117&lt;/code&gt;&lt;/a&gt; (first contribution) prioritize constructors and builders in completions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/15923&quot;&gt;&lt;code&gt;#15923&lt;/code&gt;&lt;/a&gt; improve support for ignored proc macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/15476&quot;&gt;&lt;code&gt;#15476&lt;/code&gt;&lt;/a&gt; substitute &lt;code&gt;$saved_file&lt;/code&gt; in custom &lt;code&gt;check&lt;/code&gt; commands.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16550&quot;&gt;&lt;code&gt;#16550&lt;/code&gt;&lt;/a&gt; (first contribution) activate on top level &lt;code&gt;Cargo.toml&lt;/code&gt; and &lt;code&gt;rust-project.json&lt;/code&gt; files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16530&quot;&gt;&lt;code&gt;#16530&lt;/code&gt;&lt;/a&gt; fix macro transcriber emitting incorrect lifetime tokens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16541&quot;&gt;&lt;code&gt;#16541&lt;/code&gt;&lt;/a&gt; highlight doc comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16547&quot;&gt;&lt;code&gt;#16547&lt;/code&gt;&lt;/a&gt; validate literals in proc macro server&amp;#8217;s &lt;code&gt;FreeFunctions::literal_from_str&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16544&quot;&gt;&lt;code&gt;#16544&lt;/code&gt;&lt;/a&gt; only complete traits in &lt;code&gt;impl &amp;#8230;&amp;#8203; for&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16553&quot;&gt;&lt;code&gt;#16553&lt;/code&gt;&lt;/a&gt; improve parser error recovery on &lt;code&gt;=&lt;/code&gt; in record field initializer and patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16554&quot;&gt;&lt;code&gt;#16554&lt;/code&gt;&lt;/a&gt; pass &lt;code&gt;.cargo/config.toml&lt;/code&gt; environment variables to proc-macro server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16563&quot;&gt;&lt;code&gt;#16563&lt;/code&gt;&lt;/a&gt; set &lt;code&gt;RUSTUP_TOOLCHAIN&lt;/code&gt; and invoke the proxies instead of sysroot binaries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16247&quot;&gt;&lt;code&gt;#16247&lt;/code&gt;&lt;/a&gt; fix build scripts not being rebuilt on some occasions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16574&quot;&gt;&lt;code&gt;#16574&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;needless_return&lt;/code&gt; false positives on trailing inner item declarations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16582&quot;&gt;&lt;code&gt;#16582&lt;/code&gt;&lt;/a&gt; respect textual length of paths in &lt;code&gt;find_path&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16583&quot;&gt;&lt;code&gt;#16583&lt;/code&gt;&lt;/a&gt; ignore type mismatches between &lt;code&gt;{unknown}&lt;/code&gt; and non-&lt;code&gt;{unknown}&lt;/code&gt; types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16586&quot;&gt;&lt;code&gt;#16586&lt;/code&gt;&lt;/a&gt; remove cargo knowledge from &lt;code&gt;CrateData&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16569&quot;&gt;&lt;code&gt;#16569&lt;/code&gt;&lt;/a&gt; place snippets correctly in multi-edit assists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16579&quot;&gt;&lt;code&gt;#16579&lt;/code&gt;&lt;/a&gt; fix snippets being placed leftwards of where they should be.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16559&quot;&gt;&lt;code&gt;#16559&lt;/code&gt;&lt;/a&gt; fill in SCIP documentation fields.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16588&quot;&gt;&lt;code&gt;#16588&lt;/code&gt;&lt;/a&gt; (first contribution) parse (nightly) &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; trait bounds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16587&quot;&gt;&lt;code&gt;#16587&lt;/code&gt;&lt;/a&gt; (first contribution) update GitHub actions and Node version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16576&quot;&gt;&lt;code&gt;#16576&lt;/code&gt;&lt;/a&gt; (first contribution) add license files to &lt;code&gt;lsp-server&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/15003&quot;&gt;&lt;code&gt;#15003&lt;/code&gt;&lt;/a&gt; add basic support for &lt;code&gt;become&lt;/code&gt; expressions (tail calls).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16577&quot;&gt;&lt;code&gt;#16577&lt;/code&gt;&lt;/a&gt; migrate assists to the structured snippet API, part 7 of 7.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16446&quot;&gt;&lt;code&gt;#16446&lt;/code&gt;&lt;/a&gt; implement &lt;code&gt;literal_from_str&lt;/code&gt; in proc macro server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16537&quot;&gt;&lt;code&gt;#16537&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16545&quot;&gt;&lt;code&gt;#16545&lt;/code&gt;&lt;/a&gt; make tool discovery prefer sysroot paths.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16540&quot;&gt;&lt;code&gt;#16540&lt;/code&gt;&lt;/a&gt; make &lt;code&gt;macro_arg&lt;/code&gt; query always returns a &lt;code&gt;TokenTree&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16560&quot;&gt;&lt;code&gt;#16560&lt;/code&gt;&lt;/a&gt; set channel override when querying the sysroot metadata.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16558&quot;&gt;&lt;code&gt;#16558&lt;/code&gt;&lt;/a&gt; update &lt;code&gt;JsonProject&lt;/code&gt; to include optional fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16562&quot;&gt;&lt;code&gt;#16562&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;clippy&lt;/code&gt; and &lt;code&gt;rustfmt&lt;/code&gt; problem matchers to CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16573&quot;&gt;&lt;code&gt;#16573&lt;/code&gt;&lt;/a&gt; remove &lt;code&gt;salsa&lt;/code&gt; compile tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16533&quot;&gt;&lt;code&gt;#16533&lt;/code&gt;&lt;/a&gt; bump &lt;code&gt;rustc_pattern_analysis&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16585&quot;&gt;&lt;code&gt;#16585&lt;/code&gt;&lt;/a&gt; bump &lt;code&gt;actions/checkout&lt;/code&gt; to &lt;code&gt;v4&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16598&quot;&gt;&lt;code&gt;#16598&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16599&quot;&gt;&lt;code&gt;#16599&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16600&quot;&gt;&lt;code&gt;#16600&lt;/code&gt;&lt;/a&gt; downgrade &lt;code&gt;actions/checkout&lt;/code&gt;, &lt;code&gt;actions/setup-node&lt;/code&gt; and Node in release workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16597&quot;&gt;&lt;code&gt;#16597&lt;/code&gt;&lt;/a&gt; sync from downstream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #220</title>
        <pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2024/02/12/changelog-220.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2024/02/12/changelog-220.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/c06ca6cff5af0fce63d4a28b33e5d244686cb442&quot;&gt;&lt;code&gt;c06ca6c&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2024-02-12&quot;&gt;&lt;code&gt;2024-02-12&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;v0.3.1839&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16510&quot;&gt;&lt;code&gt;#16510&lt;/code&gt;&lt;/a&gt; add option to only run &lt;code&gt;cargo check&lt;/code&gt; on the current package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16502&quot;&gt;&lt;code&gt;#16502&lt;/code&gt;&lt;/a&gt; add unnecessary else diagnostic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16460&quot;&gt;&lt;code&gt;#16460&lt;/code&gt;&lt;/a&gt; add trailing return diagnostic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16477&quot;&gt;&lt;code&gt;#16477&lt;/code&gt;&lt;/a&gt; add incorrect case diagnostics for traits and their associated items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16454&quot;&gt;&lt;code&gt;#16454&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; postfix completions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16424&quot;&gt;&lt;code&gt;#16424&lt;/code&gt;&lt;/a&gt; add support for converting &lt;code&gt;let&lt;/code&gt; statements to guarded returns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/15863&quot;&gt;&lt;code&gt;#15863&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;UnindexedProject&lt;/code&gt; notification for LSP clients.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16487&quot;&gt;&lt;code&gt;#16487&lt;/code&gt;&lt;/a&gt; (first contribution) improve &lt;code&gt;Deref&lt;/code&gt; handling in &quot;Generate getter&quot; assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16509&quot;&gt;&lt;code&gt;#16509&lt;/code&gt;&lt;/a&gt; render visibility for tuple struct fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16124&quot;&gt;&lt;code&gt;#16124&lt;/code&gt;&lt;/a&gt; improve parser error recovery on missing arguments in call expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16484&quot;&gt;&lt;code&gt;#16484&lt;/code&gt;&lt;/a&gt; preserve &lt;code&gt;where&lt;/code&gt; clause when expanding built-in derive macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16462&quot;&gt;&lt;code&gt;#16462&lt;/code&gt;&lt;/a&gt; improve error message when proc-macros have not yet been built.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16497&quot;&gt;&lt;code&gt;#16497&lt;/code&gt;&lt;/a&gt; fix spacing when inlining functions defined in macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16517&quot;&gt;&lt;code&gt;#16517&lt;/code&gt;&lt;/a&gt; fix crash inside &lt;code&gt;filter_unnecessary_bounds&lt;/code&gt; on missing generic parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16482&quot;&gt;&lt;code&gt;#16482&lt;/code&gt;&lt;/a&gt; (first contribution) use boxed slice for &lt;code&gt;Subtree::token_trees&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16503&quot;&gt;&lt;code&gt;#16503&lt;/code&gt;&lt;/a&gt; move &lt;code&gt;salsa&lt;/code&gt; fork in-tree.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16505&quot;&gt;&lt;code&gt;#16505&lt;/code&gt;&lt;/a&gt; optimize input queries that take no arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16527&quot;&gt;&lt;code&gt;#16527&lt;/code&gt;&lt;/a&gt; remove hack for self-referential &lt;code&gt;SyntaxContext&lt;/code&gt;s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16467&quot;&gt;&lt;code&gt;#16467&lt;/code&gt;&lt;/a&gt; migrate assists to the structured snippet API, part 6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16474&quot;&gt;&lt;code&gt;#16474&lt;/code&gt;&lt;/a&gt; instrument more paths using &lt;code&gt;tracing&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16499&quot;&gt;&lt;code&gt;#16499&lt;/code&gt;&lt;/a&gt; bump &lt;code&gt;rustc_pattern_analysis&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16525&quot;&gt;&lt;code&gt;#16525&lt;/code&gt;&lt;/a&gt; abstract more over &lt;code&gt;ItemTreeLoc&lt;/code&gt;-like structs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16470&quot;&gt;&lt;code&gt;#16470&lt;/code&gt;&lt;/a&gt; lint against debug prints and disallowed types using Clippy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16500&quot;&gt;&lt;code&gt;#16500&lt;/code&gt;&lt;/a&gt; run Clippy on Windows, not Linux.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16518&quot;&gt;&lt;code&gt;#16518&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16519&quot;&gt;&lt;code&gt;#16519&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16521&quot;&gt;&lt;code&gt;#16521&lt;/code&gt;&lt;/a&gt; enable more Clippy lints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16492&quot;&gt;&lt;code&gt;#16492&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16532&quot;&gt;&lt;code&gt;#16532&lt;/code&gt;&lt;/a&gt; sync from downstream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #219</title>
        <pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2024/02/05/changelog-219.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2024/02/05/changelog-219.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/39ad79bec5202fda903893034918cb5526bb834c&quot;&gt;&lt;code&gt;39ad79b&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2024-02-05&quot;&gt;&lt;code&gt;2024-02-05&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;v0.3.1831&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16439&quot;&gt;&lt;code&gt;#16439&lt;/code&gt;&lt;/a&gt; support &quot;Go to definition&quot; from inside &lt;code&gt;include!&lt;/code&gt;d files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16417&quot;&gt;&lt;code&gt;#16417&lt;/code&gt;&lt;/a&gt; add &quot;Normalize import&quot; assist and improve &quot;Merge imports&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16441&quot;&gt;&lt;code&gt;#16441&lt;/code&gt;&lt;/a&gt; add option to exclude tests from references search results.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/15730&quot;&gt;&lt;code&gt;#15730&lt;/code&gt;&lt;/a&gt; (first contribution) add postfix completion for &lt;code&gt;let .. else&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16453&quot;&gt;&lt;code&gt;#16453&lt;/code&gt;&lt;/a&gt; undo special bracket classification in VS Code config.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16463&quot;&gt;&lt;code&gt;#16463&lt;/code&gt;&lt;/a&gt; (first contribution) remove references to &lt;code&gt;abi_amdgpu_kernel&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16394&quot;&gt;&lt;code&gt;#16394&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16456&quot;&gt;&lt;code&gt;#16456&lt;/code&gt;&lt;/a&gt; extend &lt;code&gt;tracing&lt;/code&gt; integration and use it in &lt;code&gt;hprof&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16459&quot;&gt;&lt;code&gt;#16459&lt;/code&gt;&lt;/a&gt; use improved &lt;code&gt;adjusted_display_range&lt;/code&gt; for all diagnostics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16461&quot;&gt;&lt;code&gt;#16461&lt;/code&gt;&lt;/a&gt; remove unnecessary usages of &lt;code&gt;ExpansionInfo&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16447&quot;&gt;&lt;code&gt;#16447&lt;/code&gt;&lt;/a&gt; clean up &lt;code&gt;mir&lt;/code&gt; error variants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16479&quot;&gt;&lt;code&gt;#16479&lt;/code&gt;&lt;/a&gt; use MacOS 12 runners for releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16451&quot;&gt;&lt;code&gt;#16451&lt;/code&gt;&lt;/a&gt; work through temporarily allowed Clippy lints, part 2.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16413&quot;&gt;&lt;code&gt;#16413&lt;/code&gt;&lt;/a&gt; run &lt;code&gt;clippy&lt;/code&gt; on CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16448&quot;&gt;&lt;code&gt;#16448&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16469&quot;&gt;&lt;code&gt;#16469&lt;/code&gt;&lt;/a&gt; add typo check to CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16476&quot;&gt;&lt;code&gt;#16476&lt;/code&gt;&lt;/a&gt; sync from downstream.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16416&quot;&gt;&lt;code&gt;#16416&lt;/code&gt;&lt;/a&gt; VS Code: report conflict with &lt;code&gt;panicbit.cargo&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #218</title>
        <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2024/01/29/changelog-218.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2024/01/29/changelog-218.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/7219414e81810fd4d967136c4a0650523892c157&quot;&gt;&lt;code&gt;7219414&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2024-01-29&quot;&gt;&lt;code&gt;2024-01-29&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;v0.3.1823&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16420&quot;&gt;&lt;code&gt;#16420&lt;/code&gt;&lt;/a&gt; use upstream exhaustiveness checker.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16431&quot;&gt;&lt;code&gt;#16431&lt;/code&gt;&lt;/a&gt; (first contribution) use &lt;code&gt;adjusted_display_range_new&lt;/code&gt; in &lt;code&gt;mismatched_arg_count&lt;/code&gt; diagnostic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16427&quot;&gt;&lt;code&gt;#16427&lt;/code&gt;&lt;/a&gt; filter &lt;code&gt;#[cfg]&lt;/code&gt;-ed out fields when lowering record patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16415&quot;&gt;&lt;code&gt;#16415&lt;/code&gt;&lt;/a&gt; make &lt;code&gt;TryToNav&lt;/code&gt; trait public.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16435&quot;&gt;&lt;code&gt;#16435&lt;/code&gt;&lt;/a&gt; do not return code lens data after resolving.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16434&quot;&gt;&lt;code&gt;#16434&lt;/code&gt;&lt;/a&gt; restructure and clean up &lt;code&gt;hir-expand&lt;/code&gt; a bit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #217</title>
        <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2024/01/22/changelog-217.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2024/01/22/changelog-217.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/d410d4a2baf9e99b37b03dd42f06238b14374bf7&quot;&gt;&lt;code&gt;d410d4a&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2024-01-22&quot;&gt;&lt;code&gt;2024-01-22&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;v0.3.1815&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16370&quot;&gt;&lt;code&gt;#16370&lt;/code&gt;&lt;/a&gt; show additional value information when hovering over literals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16374&quot;&gt;&lt;code&gt;#16374&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16375&quot;&gt;&lt;code&gt;#16375&lt;/code&gt;&lt;/a&gt; show implemented notable traits on hover.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16391&quot;&gt;&lt;code&gt;#16391&lt;/code&gt;&lt;/a&gt; add config to allow renaming of non-local definitions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16372&quot;&gt;&lt;code&gt;#16372&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;One&lt;/code&gt; import granularity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16349&quot;&gt;&lt;code&gt;#16349&lt;/code&gt;&lt;/a&gt; add error recovery for &lt;code&gt;use_tree_list&lt;/code&gt; parsing:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/71162630/295905079-30a58c40-2711-48d2-b2e5-fb208fc8636c.png&quot; alt=&quot;Screenshot showing only one error for an unclosed brace in a use declaration&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16385&quot;&gt;&lt;code&gt;#16385&lt;/code&gt;&lt;/a&gt; fix intra-doc links.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/15868&quot;&gt;&lt;code&gt;#15868&lt;/code&gt;&lt;/a&gt; infer &lt;code&gt;OUT_DIR&lt;/code&gt; when workspace root contains a symlink.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16396&quot;&gt;&lt;code&gt;#16396&lt;/code&gt;&lt;/a&gt; fix panic when extracting struct from enum variant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16378&quot;&gt;&lt;code&gt;#16378&lt;/code&gt;&lt;/a&gt; handle &lt;code&gt;SelfParam&lt;/code&gt; better in &quot;Inline call&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16405&quot;&gt;&lt;code&gt;#16405&lt;/code&gt;&lt;/a&gt; include &lt;code&gt;for&lt;/code&gt; in &quot;Convert to guarded return&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16314&quot;&gt;&lt;code&gt;#16314&lt;/code&gt;&lt;/a&gt; parse &lt;code&gt;macro_rules&lt;/code&gt; as macro name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16367&quot;&gt;&lt;code&gt;#16367&lt;/code&gt;&lt;/a&gt; make &lt;code&gt;value_ty&lt;/code&gt; query fallible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/15636&quot;&gt;&lt;code&gt;#15636&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16383&quot;&gt;&lt;code&gt;#16383&lt;/code&gt;&lt;/a&gt; (first contribution) show which roots are being scanned in progress messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16196&quot;&gt;&lt;code&gt;#16196&lt;/code&gt;&lt;/a&gt; (first contribution) rename &lt;code&gt;generator&lt;/code&gt; to &lt;code&gt;coroutine&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16409&quot;&gt;&lt;code&gt;#16409&lt;/code&gt;&lt;/a&gt; (first contribution) remove some unused code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16350&quot;&gt;&lt;code&gt;#16350&lt;/code&gt;&lt;/a&gt; speed up line index calculation via NEON for aarch64.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16395&quot;&gt;&lt;code&gt;#16395&lt;/code&gt;&lt;/a&gt; speed up line ending normalization using &lt;code&gt;memchr&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16366&quot;&gt;&lt;code&gt;#16366&lt;/code&gt;&lt;/a&gt; make data queries transparent over their diagnostics variant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16352&quot;&gt;&lt;code&gt;#16352&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16389&quot;&gt;&lt;code&gt;#16389&lt;/code&gt;&lt;/a&gt; port &lt;code&gt;rustfmt&lt;/code&gt;'s algorithm for import ordering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16351&quot;&gt;&lt;code&gt;#16351&lt;/code&gt;&lt;/a&gt; eagerly lower enum variants in &lt;code&gt;CrateDefMap&lt;/code&gt; construction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16388&quot;&gt;&lt;code&gt;#16388&lt;/code&gt;&lt;/a&gt; record &lt;code&gt;FnAbi&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16356&quot;&gt;&lt;code&gt;#16356&lt;/code&gt;&lt;/a&gt; add unstable config for loading the sysroot sources via &lt;code&gt;cargo metadata&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16380&quot;&gt;&lt;code&gt;#16380&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16387&quot;&gt;&lt;code&gt;#16387&lt;/code&gt;&lt;/a&gt; run &lt;code&gt;cargo metadata&lt;/code&gt; on sysroot for CI metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16384&quot;&gt;&lt;code&gt;#16384&lt;/code&gt;&lt;/a&gt; make use of some new &lt;code&gt;SmolStr&lt;/code&gt; improvements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16397&quot;&gt;&lt;code&gt;#16397&lt;/code&gt;&lt;/a&gt; refactor &lt;code&gt;macro_call&lt;/code&gt; to be consistent with other parsers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16398&quot;&gt;&lt;code&gt;#16398&lt;/code&gt;&lt;/a&gt; automatically fix Clippy lints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16401&quot;&gt;&lt;code&gt;#16401&lt;/code&gt;&lt;/a&gt; expand lint tables and make Clippy happy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16404&quot;&gt;&lt;code&gt;#16404&lt;/code&gt;&lt;/a&gt; work through temporarily allowed Clippy lints, part 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16406&quot;&gt;&lt;code&gt;#16406&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;max_line_length&lt;/code&gt; to &lt;code&gt;.editorconfig&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16364&quot;&gt;&lt;code&gt;#16364&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16412&quot;&gt;&lt;code&gt;#16412&lt;/code&gt;&lt;/a&gt; sync from downstream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #216</title>
        <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2024/01/15/changelog-216.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2024/01/15/changelog-216.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/9d8889cdfcc3aa0302353fc988ed21ff9bc9925c&quot;&gt;&lt;code&gt;9d8889c&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2024-01-15&quot;&gt;&lt;code&gt;2024-01-15&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;v0.3.1807&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16209&quot;&gt;&lt;code&gt;#16209&lt;/code&gt;&lt;/a&gt; (first contribution) add assist to merge nested &lt;code&gt;if&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;https://user-images.githubusercontent.com/308347/296709371-a674b37c-0d77-487e-9431-e6fac30998ad.mp4&quot; controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16308&quot;&gt;&lt;code&gt;#16308&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;$crate&lt;/code&gt; for built-in derives.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16265&quot;&gt;&lt;code&gt;#16265&lt;/code&gt;&lt;/a&gt; (first contribution) include &lt;code&gt;pub(crate)&lt;/code&gt; imports in suggestions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16348&quot;&gt;&lt;code&gt;#16348&lt;/code&gt;&lt;/a&gt; fix nested &lt;code&gt;include!&lt;/code&gt;s resolving from the wrong base file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16312&quot;&gt;&lt;code&gt;#16312&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;rust-analyzer-proc-macro-srv&lt;/code&gt; failing to launch on Windows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16277&quot;&gt;&lt;code&gt;#16277&lt;/code&gt;&lt;/a&gt; fix panic in &lt;code&gt;generate_delegate_methods&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16333&quot;&gt;&lt;code&gt;#16333&lt;/code&gt;&lt;/a&gt; preserve extracted block comments in &quot;Extract function&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16310&quot;&gt;&lt;code&gt;#16310&lt;/code&gt;&lt;/a&gt; fix parsing of method calls on ranges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16274&quot;&gt;&lt;code&gt;#16274&lt;/code&gt;&lt;/a&gt; consider &lt;code&gt;#[doc(notable_trait)]&lt;/code&gt; for completion relevance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16307&quot;&gt;&lt;code&gt;#16307&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t store the VFS contents in memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16329&quot;&gt;&lt;code&gt;#16329&lt;/code&gt;&lt;/a&gt; minor perf and memory improvements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16347&quot;&gt;&lt;code&gt;#16347&lt;/code&gt;&lt;/a&gt; consider all kinds of explicit private imports in &lt;code&gt;find_path&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16319&quot;&gt;&lt;code&gt;#16319&lt;/code&gt;&lt;/a&gt; differentiate between VFS configuration and file change events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16275&quot;&gt;&lt;code&gt;#16275&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;ast::Path::segments&lt;/code&gt; implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16334&quot;&gt;&lt;code&gt;#16334&lt;/code&gt;&lt;/a&gt; bump &lt;code&gt;salsa&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16317&quot;&gt;&lt;code&gt;#16317&lt;/code&gt;&lt;/a&gt; sync from downstream.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16271&quot;&gt;&lt;code&gt;#16271&lt;/code&gt;&lt;/a&gt; remove &lt;code&gt;sysroot-abi&lt;/code&gt; feature flag from &lt;code&gt;proc-macro-test&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16309&quot;&gt;&lt;code&gt;#16309&lt;/code&gt;&lt;/a&gt; recognize proc macro server unexpectedly quitting and report the exit code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16311&quot;&gt;&lt;code&gt;#16311&lt;/code&gt;&lt;/a&gt; remove the &lt;code&gt;rustc_dependencies&lt;/code&gt; crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16339&quot;&gt;&lt;code&gt;#16339&lt;/code&gt;&lt;/a&gt; replace &lt;code&gt;source_root_crates&lt;/code&gt; output hash set with a slice.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #215</title>
        <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2024/01/08/changelog-215.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2024/01/08/changelog-215.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/af40101841c45aa75b56f4e9ca745369da8fb4ba&quot;&gt;&lt;code&gt;af40101&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2024-01-08&quot;&gt;&lt;code&gt;2024-01-08&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;v0.3.1799&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16222&quot;&gt;&lt;code&gt;#16222&lt;/code&gt;&lt;/a&gt; (first contribution) add &lt;code&gt;unresolved_assoc_item&lt;/code&gt; diagnostic:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/308347/293725355-a5f0627b-890b-4a7b-b450-ef6acac547bb.png&quot; alt=&quot;Screenshot showing a diagnostic on a misspelled associated function&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16279&quot;&gt;&lt;code&gt;#16279&lt;/code&gt;&lt;/a&gt; support IDE features for tuple fields:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/308347/294854978-bb047739-2dd4-4a11-a287-6123f4e6d782.png&quot; alt=&quot;Screenshot showing hover working on a tuple field, inside a `println!` call&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/15933&quot;&gt;&lt;code&gt;#15933&lt;/code&gt;&lt;/a&gt; resolve inherent and implemented associated items in doc comments:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/7189784/293935411-c37ed8b7-b572-4684-8e81-2a817b0027c4.png&quot; alt=&quot;Screenshot showing associated methods and consts being highlighted in doc comments&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16100&quot;&gt;&lt;code&gt;#16100&lt;/code&gt;&lt;/a&gt; add quick fix for unresolved methods when an associated function with the same name exists:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/71162630/289863711-1ea1d8b8-3436-4251-a512-e0f9de01a13c.gif&quot; alt=&quot;Screen recording showing quick fixes for invalid method calls where an associated method with the same name exists&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16011&quot;&gt;&lt;code&gt;#16011&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;rust-analyzer.cargo.buildScripts.rebuildOnSave&lt;/code&gt; option to rebuild proc macros on save if they change.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16223&quot;&gt;&lt;code&gt;#16223&lt;/code&gt;&lt;/a&gt; add quick fix for &quot;Redundant associated item&quot; diagnostic:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/71162630/293529876-74022c52-1566-49a0-9be8-03b82f3e730f.gif&quot; alt=&quot;Screen recording showing a quick fix that adds an implemented method to the corresponding trait definition&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16298&quot;&gt;&lt;code&gt;#16298&lt;/code&gt;&lt;/a&gt; add inlay hint for exclusive ranges:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/94326797/294750534-d6bbc0de-52a5-4af4-b53c-a034749b6cab.png&quot; alt=&quot;Screenshot showing inlay hints like 0..&amp;lt;10&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16081&quot;&gt;&lt;code&gt;#16081&lt;/code&gt;&lt;/a&gt; (first contribution) keep trailing whitespace in doc comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16139&quot;&gt;&lt;code&gt;#16139&lt;/code&gt;&lt;/a&gt; (first contribution) give methods a container name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16136&quot;&gt;&lt;code&gt;#16136&lt;/code&gt;&lt;/a&gt; make the expected completion type a tad smarter with function types:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/29989290/291000125-c06d6c93-5cac-4ebe-a93b-923017a6ae8c.png&quot; alt=&quot;Screenshot showing no parantheses when completing a struct field with a function pointer of matching type&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16258&quot;&gt;&lt;code&gt;#16258&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16261&quot;&gt;&lt;code&gt;#16261&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16267&quot;&gt;&lt;code&gt;#16267&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16270&quot;&gt;&lt;code&gt;#16270&lt;/code&gt;&lt;/a&gt; rewrite and optimize &lt;code&gt;ImportMap::search_dependencies&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16268&quot;&gt;&lt;code&gt;#16268&lt;/code&gt;&lt;/a&gt; remove result limit for trait-importing method completions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16153&quot;&gt;&lt;code&gt;#16153&lt;/code&gt;&lt;/a&gt; tell user that &lt;code&gt;linkedProjects&lt;/code&gt; is set when failing to discover projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16234&quot;&gt;&lt;code&gt;#16234&lt;/code&gt;&lt;/a&gt; fix focus range in attribute/derive upmapping.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16085&quot;&gt;&lt;code&gt;#16085&lt;/code&gt;&lt;/a&gt; fix type inference with &lt;code&gt;IndexMut&lt;/code&gt; returning references.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/15810&quot;&gt;&lt;code&gt;#15810&lt;/code&gt;&lt;/a&gt; fix panic with macros in &quot;Convert boolean to enum&quot; and &quot;Promot local to constant&quot; assists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16112&quot;&gt;&lt;code&gt;#16112&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16264&quot;&gt;&lt;code&gt;#16264&lt;/code&gt;&lt;/a&gt; rewrite &quot;Generate delegate trait&quot; assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16067&quot;&gt;&lt;code&gt;#16067&lt;/code&gt;&lt;/a&gt; make &quot;Introduce named generic&quot; assist work with nested types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16068&quot;&gt;&lt;code&gt;#16068&lt;/code&gt;&lt;/a&gt; pick up new generic names on conflict in &quot;Introduce named generic&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16114&quot;&gt;&lt;code&gt;#16114&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;Self&lt;/code&gt; type replacement in &quot;Inline function&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16199&quot;&gt;&lt;code&gt;#16199&lt;/code&gt;&lt;/a&gt; resolve &lt;code&gt;Self&lt;/code&gt; in &quot;Extract struct from enum variant&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16049&quot;&gt;&lt;code&gt;#16049&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t complete callable parantheses in struct literals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16241&quot;&gt;&lt;code&gt;#16241&lt;/code&gt;&lt;/a&gt; give a userful error when &lt;code&gt;rustc&lt;/code&gt; cannot be found in explicit sysroot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16285&quot;&gt;&lt;code&gt;#16285&lt;/code&gt;&lt;/a&gt; fix panic on unaligned &lt;code&gt;#[repr(packed)]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16062&quot;&gt;&lt;code&gt;#16062&lt;/code&gt;&lt;/a&gt; update &lt;code&gt;rust-analyzer.cargo.check&lt;/code&gt; documentation references to &lt;code&gt;rust-analyzer.check&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16179&quot;&gt;&lt;code&gt;#16179&lt;/code&gt;&lt;/a&gt; (first contribution) populate new SCIP &lt;code&gt;SymbolInformation&lt;/code&gt; fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16213&quot;&gt;&lt;code&gt;#16213&lt;/code&gt;&lt;/a&gt; (first contribution) update dev guide based on the 2024-01-01 release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16252&quot;&gt;&lt;code&gt;#16252&lt;/code&gt;&lt;/a&gt; (first contribution) switch to &lt;code&gt;expected.assert_eq&lt;/code&gt; for &lt;code&gt;ide&lt;/code&gt; tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/15922&quot;&gt;&lt;code&gt;#15922&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16238&quot;&gt;&lt;code&gt;#16238&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16262&quot;&gt;&lt;code&gt;#16262&lt;/code&gt;&lt;/a&gt; (first contribution) update Gentoo installation instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16302&quot;&gt;&lt;code&gt;#16302&lt;/code&gt;&lt;/a&gt; (first contribution) add a basic &lt;code&gt;README.md&lt;/code&gt; to the &lt;code&gt;line-index&lt;/code&gt; crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16290&quot;&gt;&lt;code&gt;#16290&lt;/code&gt;&lt;/a&gt; reduce &lt;code&gt;Vec&lt;/code&gt; cloning in MIR lowering and eval.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16237&quot;&gt;&lt;code&gt;#16237&lt;/code&gt;&lt;/a&gt; reduce &lt;code&gt;Arc&lt;/code&gt; allocations in &lt;code&gt;macro_expand&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16082&quot;&gt;&lt;code&gt;#16082&lt;/code&gt;&lt;/a&gt; migrate assists to the structured snippet API, part 5.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clean up and enhance readability of &lt;code&gt;generate_delegate_trait&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16226&quot;&gt;&lt;code&gt;#16226&lt;/code&gt;&lt;/a&gt; expose whether the channel has been dropped in &lt;code&gt;lsp-server&lt;/code&gt; errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16211&quot;&gt;&lt;code&gt;#16211&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;[workspace.lints.clippy]&lt;/code&gt; to configure lints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16256&quot;&gt;&lt;code&gt;#16256&lt;/code&gt;&lt;/a&gt; only compare relevant parts in  &lt;code&gt;ide::{runnables, inlay_hints}&lt;/code&gt; tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16260&quot;&gt;&lt;code&gt;#16260&lt;/code&gt;&lt;/a&gt; replace single usage of &lt;code&gt;check_expect&lt;/code&gt; with &lt;code&gt;check_diagnostics&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16294&quot;&gt;&lt;code&gt;#16294&lt;/code&gt;&lt;/a&gt; fix some minor &lt;code&gt;clippy::perf&lt;/code&gt; issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16248&quot;&gt;&lt;code&gt;#16248&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;proc-macro-test&lt;/code&gt; crate back to the main workspace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16249&quot;&gt;&lt;code&gt;#16249&lt;/code&gt;&lt;/a&gt; sync from downstream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #214</title>
        <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2024/01/01/changelog-214.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2024/01/01/changelog-214.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/9db515503f11bda7812cdfb9c2839f70f4cb1fdd&quot;&gt;&lt;code&gt;9db5155&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2024-01-01&quot;&gt;&lt;code&gt;2024-01-01&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;v0.3.1791&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16221&quot;&gt;&lt;code&gt;#16221&lt;/code&gt;&lt;/a&gt; (first contribution) fix panic in some macros due to unhandled &lt;code&gt;SyntaxContextId::SELF_REF&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16096&quot;&gt;&lt;code&gt;#16096&lt;/code&gt;&lt;/a&gt; (first contribution) update VS Code extension panic problem matcher.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16224&quot;&gt;&lt;code&gt;#16224&lt;/code&gt;&lt;/a&gt; fix handling of hygiene in the presence of &lt;code&gt;SyntaxContextId::SELF_REF&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16217&quot;&gt;&lt;code&gt;#16217&lt;/code&gt;&lt;/a&gt; (first contribution) simplify implementation of &lt;code&gt;apply_document_changes&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>The Heart of a Language Server</title>
        <pubDate>Tue, 26 Dec 2023 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//blog/2023/12/26/the-heart-of-a-language-server.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//blog/2023/12/26/the-heart-of-a-language-server.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, I want to expand on one curious comment from rust-analyzer code base.
You can find the comment &lt;a href=&quot;https://github.com/rust-lang/rust-analyzer/blob/34cffbf1d75fb6b5cb6bc68a9854b20dc74f135d/crates/hir/src/semantics/source_to_def.rs#L3-L4&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It describes a curious recursive algorithm that is repeated across different language-server-shaped thing:
I&amp;#8217;ve seen it implemented for Kotlin and C#, and implemented it myself for Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a seemingly random grab bag of IDE features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Go to definition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code completion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run test at the cursor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract variable&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What&amp;#8217;s common among them all?
All these features are relative to the &lt;em&gt;current position&lt;/em&gt; of the cursor!
The input is not only the state of the code at a given point in time, but a specific location in the source of a project, like &lt;code&gt;src/main.rs:90:2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the first thing a language server needs to do for any of the above features is to understand what is located at the given offset, semantically speaking.
Is it an operator, like &lt;code&gt;+&lt;/code&gt;?
Is it a name, like &lt;code&gt;foo&lt;/code&gt;?
If it is a name, in what context a name is used --- does it &lt;em&gt;define&lt;/em&gt; an entity named &lt;code&gt;foo&lt;/code&gt; or does it &lt;em&gt;refer&lt;/em&gt; to a pre-existing entity?
If it is a reference, then &lt;em&gt;what&lt;/em&gt; entity is referenced?
What type is it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step here is determining a node in the syntax tree which covers the offset.
This is relatively straightforward:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;node_at_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SyntaxNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SyntaxNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.text_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.text_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;node_at_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.unwrap_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the syntax tree by itself doesn&amp;#8217;t contain enough information to drive IDE features.
Semantic analysis is required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the problem with semantic analysis is that it usually involves several layers of intermediate representations, which are only indirectly related to the syntax tree.
While the syntax tree is relatively uniform, and it is possible to implement a generic traversal like the one above,
semantic information is usually stored in a menagerie of ad-hoc data structures: trees, graphs, and plain old hash tables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traditional compilers attach source span information to semantic elements, which could look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Span&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PathBuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalVariable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InternedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mutability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mutability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Span&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With line information in place, it &lt;em&gt;is&lt;/em&gt; possible for a language server to find an appropriate semantic element for a given cursor position:
just iterate all semantic elements there are, and find the one with the smallest span which still contains the cursor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach works, but has two drawbacks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;first&lt;/em&gt; drawback is that it&amp;#8217;s too slow.
To iterate over all semantic elements, an entire compilation unit must be analyzed, and that&amp;#8217;s too slow, even if done incrementally.
The core trick of a performant language server is that it avoids any analysis unless &lt;em&gt;absolutely&lt;/em&gt; necessary.
The server knows everything about the function currently on the screen, and knows almost nothing about other functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;second&lt;/em&gt; drawback is more philosophical --- using text spans &lt;em&gt;erases&lt;/em&gt; information about the underlying syntax trees.
A &lt;code&gt;LocalVariable&lt;/code&gt; didn&amp;#8217;t originate from a particular &lt;code&gt;span&lt;/code&gt; of text, it was created using a specific node in the concrete syntax tree.
For features like &quot;go to definition&quot;, which need to go from syntax to semantics, the approximation turns out to be good enough.
But for refactors, it is often convenient to go in the opposite direction --- from semantics to syntax.
To change a tuple enum to a record enum, a language server needs to find all usages of the enum in the semantic model, but then it needs to modify the syntax tree.
And going from a &lt;code&gt;Span&lt;/code&gt; back to the &lt;code&gt;SyntaxNode&lt;/code&gt; is not straightforward: different syntax nodes might have the same span!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, a &lt;code&gt;foo&lt;/code&gt; is a:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;name token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a reference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a trivial path (&lt;code&gt;foo::bar&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and a path expression&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;PATH_EXPR@20..23
  PATH@20..23
    PATH_SEGMENT@20..23
      NAME_REF@20..23
        IDENT@20..23 &quot;foo&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;iterative-recursive-analysis&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#iterative-recursive-analysis&quot;&gt;&lt;/a&gt;Iterative Recursive Analysis&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, how can a language server map syntax nodes to corresponding semantic elements, so that the mapping is precise and can be computed lazily?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, every semantic element gets a &lt;code&gt;source_syntax&lt;/code&gt; method that returns the original syntax node:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalVariable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;source_syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SyntaxNode&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The method is implemented differently for different types.
Sometimes, storing a reference to a syntax node is appropriate:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalVariable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source_syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SyntaxNodeId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalVariable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;source_syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SyntaxNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;node_id_to_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.source_syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, the syntax might be computed on demand.
For example, for local variables we might store a reference to the parent function, and the ordinal number of this local variable:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalVariable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ordinal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalVariable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;source_syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SyntaxNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_function_syntax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parent&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.source_syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parent_function_syntax&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.descendants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SyntaxNodeKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalVariable&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.nth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.ordinal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yet another pattern is to get this information from a side table:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;type SyntaxMapping = HashMap&amp;lt;LocalVariable, SyntaxNode&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In rust-analyzer all three approaches are used in various places.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This solves the problem going from a semantic element to a syntax, but what we&amp;#8217;ve started with is the opposite: from an offset like &lt;code&gt;main.rs:80:20&lt;/code&gt; we go to a &lt;code&gt;SyntaxNode&lt;/code&gt;, and then we need to discover the semantic element.
The trick is to use the same solution in &lt;em&gt;both&lt;/em&gt; directions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To find a semantic element for a given piece of syntax:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Look at the &lt;em&gt;parent&lt;/em&gt; syntax node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there is no parent, then the current syntax node corresponds to an entire file, and the appropriate semantic element is the module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Otherwise, &lt;em&gt;recursively&lt;/em&gt; lookup semantics for the parent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Among all parent&amp;#8217;s children (our siblings), find the one whose source syntax is the node we started with&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or, in pseudocode:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;semantics_for_syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SyntaxNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SemanticElement&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;module_for_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.source_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;// Recursive call&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_semantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;semantics_for_syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sibling&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_semantics&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sibling&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.source_syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sibling&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this formulation, a language server needs to just enough analysis to drill down to a specific node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider this example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RangeIter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RangeIter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RangeIter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;c&quot;&gt;//  ^ Cursor here&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RangeIter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting from the &lt;code&gt;Item&lt;/code&gt; syntax node, the language server will consider:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the return type of the function &lt;code&gt;next&lt;/code&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the function itself,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;impl Iterator&lt;/code&gt; block,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the entire file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just enough semantic analysis will be executed to learn that a file has a struct declaration and two impl blocks, but the &lt;em&gt;contents&lt;/em&gt; of the struct and the second impl block won&amp;#8217;t be inspected at all.
That is a huge win --- typically, source files are much more wide than they are deep.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This recursion-and-loop structure is present in many language servers.
For rust-analyzer, see the &lt;a href=&quot;https://github.com/rust-lang/rust-analyzer/blob/34cffbf1d75fb6b5cb6bc68a9854b20dc74f135d/crates/hir/src/semantics/source_to_def.rs#L3-L4&quot;&gt;&lt;code&gt;source_to_def&lt;/code&gt;&lt;/a&gt; module,
with many functions that convert syntax (&lt;code&gt;ast::&lt;/code&gt; types) to semantics (unqualified types).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;type_alias_to_def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeAlias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeAliasId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Roslyn, one entry point to the machinery is &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/36a0c338d6621cc5fe34b79d414074a95a6a489c/src/Compilers/CSharp/Portable/Compilation/SyntaxTreeSemanticModel.cs#L1403-L1429&quot;&gt;&lt;code&gt;GetDeclaredType&lt;/code&gt;&lt;/a&gt; function.
&lt;code&gt;BaseTypeDeclarationSyntax&lt;/code&gt; is, well, syntax, while the return type &lt;code&gt;NamedTypeSymbol&lt;/code&gt; is the semantic info.
First, Roslyn looks up semantic info for syntactic parent, using &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/36a0c338d6621cc5fe34b79d414074a95a6a489c/src/Compilers/CSharp/Portable/Compilation/SyntaxTreeSemanticModel.cs#L1423&quot;&gt;&lt;code&gt;GetDeclaredTypeMemberContainer&lt;/code&gt;&lt;/a&gt;.
Then, in &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/36a0c338d6621cc5fe34b79d414074a95a6a489c/src/Compilers/CSharp/Portable/Compilation/SyntaxTreeSemanticModel.cs#L1783&quot;&gt;&lt;code&gt;GetDeclaredMember&lt;/code&gt;&lt;/a&gt; it iterates semantic siblings and finds the one with the matching text range.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Kotlin, the entry is &lt;a href=&quot;https://github.com/JetBrains/kotlin/blob/a288b8b00e4754a1872b164999c6d3f3b8c8994a/idea/idea-frontend-fir/idea-fir-low-level-api/src/org/jetbrains/kotlin/idea/fir/low/level/api/FirModuleResolveStateImpl.kt#L93-L125&quot;&gt;&lt;code&gt;findSourceFirDeclarationByExpression&lt;/code&gt;&lt;/a&gt;.
This function starts with a syntax node (&lt;code&gt;KtExpression&lt;/code&gt; is syntax, like all &lt;code&gt;Kt&lt;/code&gt; nodes), and returns a declaration.
It uses &lt;code&gt;getNonLocalContainingOrThisDeclaration&lt;/code&gt; to get syntactic container for a current node.
Then, &lt;code&gt;findSourceNonLocalFirDeclaration&lt;/code&gt; gets &lt;code&gt;Fir&lt;/code&gt; for this parent.
Finally, &lt;code&gt;findElementIn&lt;/code&gt; function traverses &lt;code&gt;Fir&lt;/code&gt; children to find one with the same source we originally started with.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;limitations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#limitations&quot;&gt;&lt;/a&gt;Limitations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two properties of the underlying languages which make this approach work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Syntactic nesting must match semantic nesting.
Looking at parent&amp;#8217;s sibling makes sense only if the current element should be among the siblings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getting sematic element for an entire file is trivial.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second one is actually less true in Rust than it is in Kotlin or C#!
In those languages, each file starts with a package declaration, which immediately mounts the file at the appropriate place in the semantic model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Rust, a file &lt;code&gt;foo.rs&lt;/code&gt; only exists semantically if some parent file includes it via &lt;code&gt;mod foo;&lt;/code&gt; declaration!
And, in general, it&amp;#8217;s impossible to locate the parent file automatically.
&lt;em&gt;Usually&lt;/em&gt;, for &lt;code&gt;src/bar/foo.rs&lt;/code&gt; the parent would be &lt;code&gt;src/bar.rs&lt;/code&gt;, but, due to &lt;code&gt;#[path]&lt;/code&gt; attributes which override this default, this might not be true.
So rust-analyzer has to be less lazy than ideal here --- on every change, it reconstructs the entire module tree for a crate looking at every file, even if only a single file is currently visible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s another interesting example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;generate_ast_from_grammar!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FooLang.grm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, we have a hypothetical procedural macro, which reads a grammar definition from an external file, and presumably generates a bunch of Rust types for the AST described by the grammar.
One could dream of an IDE where, without knowing anything specific about &lt;code&gt;.grammar&lt;/code&gt;, it can still find usages of AST nodes defined therein, using the span information from the procedural macro.
This works in theory: when the macro creates Rust token trees, it can manufacture spans that point inside &lt;code&gt;FooLang.grm&lt;/code&gt;, which connects Rust source with the grammar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where this breaks down is laziness.
When a user invokes &quot;find usages&quot; inside &lt;code&gt;FooLang.grm&lt;/code&gt;, the IDE has no way of knowing, up-front, that the &lt;code&gt;generate_ast_from_grammar!(&quot;FooLang.grm&quot;)&lt;/code&gt; macro call needs to be expanded.
The only way this could work if the IDE conservatively expands all macros all the time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #213</title>
        <pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2023/12/25/changelog-213.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2023/12/25/changelog-213.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/85fb463fc586594925f05fc8e285b1568f98f41a&quot;&gt;&lt;code&gt;85fb463&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2023-12-25&quot;&gt;&lt;code&gt;2023-12-25&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;v0.3.1782&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16088&quot;&gt;&lt;code&gt;#16088&lt;/code&gt;&lt;/a&gt; implement a rust-analyzer span-backed proc-macro server mode.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16155&quot;&gt;&lt;code&gt;#16155&lt;/code&gt;&lt;/a&gt; (first contribution) don&amp;#8217;t assume ASCII in &lt;code&gt;remove_markdown&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16152&quot;&gt;&lt;code&gt;#16152&lt;/code&gt;&lt;/a&gt; resolve alias before resolving enum variant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16163&quot;&gt;&lt;code&gt;#16163&lt;/code&gt;&lt;/a&gt; de-duplicate annotations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16165&quot;&gt;&lt;code&gt;#16165&lt;/code&gt;&lt;/a&gt; update metavariable expression implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16066&quot;&gt;&lt;code&gt;#16066&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16185&quot;&gt;&lt;code&gt;#16185&lt;/code&gt;&lt;/a&gt; remove unnecessary braces after with unused imports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16167&quot;&gt;&lt;code&gt;#16167&lt;/code&gt;&lt;/a&gt; fully remove dummy spans.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16175&quot;&gt;&lt;code&gt;#16175&lt;/code&gt;&lt;/a&gt; correctly set and mark the proc-macro spans.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16178&quot;&gt;&lt;code&gt;#16178&lt;/code&gt;&lt;/a&gt; fix span marking for built-in function-like macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16184&quot;&gt;&lt;code&gt;#16184&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;Semantics&lt;/code&gt; node caching in completion analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16158&quot;&gt;&lt;code&gt;#16158&lt;/code&gt;&lt;/a&gt; desugar doc comments correctly for MBE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16137&quot;&gt;&lt;code&gt;#16137&lt;/code&gt;&lt;/a&gt; complete exported macros in &lt;code&gt;#[macro_use($0)]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16182&quot;&gt;&lt;code&gt;#16182&lt;/code&gt;&lt;/a&gt; update world symbols request definiton, prefer focus range for macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16183&quot;&gt;&lt;code&gt;#16183&lt;/code&gt;&lt;/a&gt; clean up &lt;code&gt;Expander&lt;/code&gt; a bit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16143&quot;&gt;&lt;code&gt;#16143&lt;/code&gt;&lt;/a&gt; move proc macro knowledge out of &lt;code&gt;base-db&lt;/code&gt; and into &lt;code&gt;hir-expand&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16145&quot;&gt;&lt;code&gt;#16145&lt;/code&gt;&lt;/a&gt; split out a &lt;code&gt;span&lt;/code&gt; crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16150&quot;&gt;&lt;code&gt;#16150&lt;/code&gt;&lt;/a&gt; move out &lt;code&gt;WithFixture&lt;/code&gt; into dev-only crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16151&quot;&gt;&lt;code&gt;#16151&lt;/code&gt;&lt;/a&gt; add minimal support for the 2024 edition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16144&quot;&gt;&lt;code&gt;#16144&lt;/code&gt;&lt;/a&gt; sync from downstream.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/16149&quot;&gt;&lt;code&gt;#16149&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t fail changelog generation on missing PRs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
  </channel>
</rss>
